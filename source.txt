#pragma mode(separator(.,;) integer(h64))
// Name [-], Col:1
symbolname:={"H","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Po","At","Rn","Fr","Ra","Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr","Rf","Db","Sg","Bh","Hs","Mt","Ds","Rg","Cn","Uut","Fl","Mc","Lv","Ts","Og"};

// Element [-], Col:2
elementname:={"Hydrogen","Helium","Lithium","Beryllium","Boron","Carbon","Nitrogen","Oxygen","Fluorine","Neon","Sodium","Magnesium","Aluminium","Silicon","Phosphorus","Sulfur","Chlorine","Argon","Potassium","Calcium","Scandium","Titanium","Vanadium","Chromium","Manganese","Iron","Cobalt","Nickel","Copper","Zinc","Gallium","Germanium","Arsenic","Selenium","Bromine","Krypton","Rubidium","Strontium","Yttrium","Zirconium","Niobium","Molybdenum","Technetium","Ruthenium","Rhodium","Palladium","Silver","Cadmium","Indium","Tin","Antimony","Tellurium","Iodine","Xenon","Caesium","Barium","Lanthanum","Cerium","Praseodymium","Neodymium","Promethium","Samarium","Europium","Gadolinium","Terbium","Dysprosium","Holmium","Erbium","Thulium","Ytterbium","Lutetium","Hafnium","Tantalum","Tungsten","Rhenium","Osmium","Iridium","Platinum","Gold","Mercury","Thallium","Lead","Bismuth","Polonium","Astatine","Radon","Francium","Radium","Actinium","Thorium","Predactinium","Uranium","Neptunium","Plutonium","Americium","Curium","Berkelium","Californium","Einsteinium","Fermium","Mendelevium","Nobelium","Lawrencium","Rutherfordium","Dubnium","Seaborgium","Bohrium","Hassium","Meitnerium","Darmstadtium","Roentgenium","Copernicium","Ununtrium","Flerovium","Moscovium","Livermorium","Tennessine","Oganesson"};

// Atomic Weight [u], Col:3
atomicmass:={1.008,4.0026,6.94,9.0122,10.81,12.011,14.007,15.999,18.998,20.180,22.990,24.305,26.982,28.085,30.974,32.06,35.45,39.95,39.098,40.078,44.956,47.867,50.942,51.996,54.938,55.845,58.933,58.693,63.546,65.38,69.723,72.630,74.922,78.971,79.904,83.798,85.468,87.62,88.906,91.224,92.906,95.95,97,101.07,102.91,106.42,107.87,112.41,114.82,118.71,121.76,127.60,126.9,131.29,132.91,137.33,138.91,140.12,140.91,144.24,145,150.36,151.96,157.25,158.93,162.5,164.93,167.26,168.93,173.05,174.97,178.49,180.95,183.84,186.21,190.23,192.22,195.08,196.97,200.59,204.38,207.2,208.98,209,210,222,223,226,227,232.04,231.04,238.03,237,244,243,247,247,251,252,257,258,259,266,267,268,269,270,269,278,281,282,285,286,289,290,293,294,294,294,294};

// Mol Weight [g.mol-1], Col:4
molmasse:={1,4,6.9,9,10.81,12.011,14,16,19,20.2,23,24.3,27,28.1,31,32.1,35.5,39.9,39.1,40.1,45.0,47.9,50.9,52.0,54.9,55.8,58.9,58.7,63.5,65.4,69.7,72.6,74.9,79,79.9,83.8,85.5,87.6,88.9,91.2,92.9,95.9,98.9,101.1,102.9,106.4,107.9,112.4,114.8,118.7,121.8,127.6,126.9,131.3,132.9,137.3,138.9,140.1,140.9,144.2,145,150.4,152,157.3,158.9,162.5,164.9,167.3,168.9,173,175,178.5,180.9,183.9,186.2,190.2,192.2,195.1,197,200.6,204.4,207.2,209,209,210,222,223,226,227,232,231,238,237,244,243,247,247,251,252,257,258,259,260,261,262,263,262,265,266,269,280,285,287,289,288,293,292,294};

// Density [g/cm^3], Col:5
density:={0.00008988,0.0001785,0.534,1.85,2.34,2.267,0.0012506,0.001429,0.001696,0.0009002,0.968,1.738,2.7,2.329,1.823,2.07,0.0032,0.001784,0.89,1.55,2.985,4.506,6.11,7.15,7.21,7.874,8.9,8.908,8.96,7.14,5.91,5.323,5.727,4.81,3.1028,0.003749,1.532,2.64,4.472,6.52,8.57,10.28,11,12.45,12.41,12.023,10.49,8.65,7.31,7.265,6.697,6.24,4.933,0.005894,1.93,3.51,6.162,6.77,6.77,7.01,7.26,7.52,5.244,7.90,8.23,8.54,8.79,9.066,9.32,6.9,9.841,13.31,16.69,19.25,21.02,22.59,22.56,21.45,19.3,13.534,11.85,11.34,9.78,9.196,0,0.00973,0,5.5,10,11.7,15.37,19.1,20.45,19.85,12,13.51,14.78,15.1,8.84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Oxidation States [-], Col:6
oxidstates:={"+1, 0, -1","0","+1","2","3","2, 4","-3, -2, -1, 1, 2, 3, 4, 5","-2, -1, 0, +1, +2","-1","-2","1","2","1, 2, 3","-4, (2) +4","±3, 4, 5","±2, 4, 6","±1, 3, 4, 5, 6, 7","-","1","(+1), +2","3","+2, +3, +4","+5, +4 ,+3 ,+2","6, 3, 2","1, 2, 3, 4, (5), 6, 7","2, 3, 4, 5, 6","2, 3","2, seltener -1, 0, 1, 3, 4","1, 2","2","3","-4, 2, 4","-3, 3, 5","±2, 4, 6","±1, 3, 5, 7","-","+1","+2","+3","4, 2","2, 5","2, 3, 4, 5, 6","-3 bis 7","2, 3, 4, 6, 8","0, +1, +2, +3, +4","0, +2, +4","+1, +2, +3","2","3, 1","(-4), 4, 2","-3, 3, 5","-2, (±1), 2, 4, 6","±1, 3, 5, 7","-","+1","+2","3","3, 4","3, 4, 2","3, 4","3","2, 3","2, 3","2, 3","4, 3","3","3","3","2, 3, 4","2, 3","3","4","5","6, 5, 4, 3, 2","-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7","-2, 0, 2, 3, 4, 6, 8","-1, 0, 1, 2, 3, 4, 6","0, +2, +4, +6","-1, 0, +1, +2, +3, +5","1, 2, 4","1, 3","2, 4","(-3) 1, 3, 5","(-2), 2, 4, 6","±1, 3, 5, 7","-","+1","2","3","4, 3, 2","5","+3, +4, +5, +6","+3, +4, +5, +6, +7","+3, +4, +5, +6, (+7)","+2, +3, +4, +5, +6, (+7)","(+2), +3, +4","+3, +4","(+2), +3, (+4)","+2, +3, (+4)","+2, +3","+2, +3","+2, +3","+3","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"};

// Electron Configuration [-], Col:7
electronconfig:={"1s1","1s2","[He] 2s1","[He] 2s2","[He] 2s2 2p1","[He] 2s2 2p2","[He] 2s2 2p3","[He] 2s2 2p4","[He] 2s2 2p5","[He] 2s2 2p6","[Ne] 3s1","[Ne] 3s2","[Ne] 3s2 3p1","[Ne] 3s2 3p2","[Ne] 3s2 3p3","[Ne] 3s2 3p4","[Ne] 3s2 3p5","[Ne] 3s2 3p6","[Ar] 4s1","[Ar] 4s2","[Ar] 3d1 4s2","[Ar] 3d2 4s2","[Ar] 3d3 4s2","[Ar] 3d5 4s1","[Ar] 3d5 4s2","[Ar] 3d6 4s2","[Ar] 3d7 4s2","[Ar] 3d8 4s2, [Ar] 3d9 4s1","[Ar] 3d10 4s1","[Ar] 3d10 4s2","[Ar] 3d10 4s2 4p1","[Ar] 3d10 4s2 4p2","[Ar] 3d10 4s2 4p3","[Ar] 3d10 4s2 4p4","[Ar] 3d10 4s2 4p5","[Ar] 3d10 4s2 4p6","[Kr] 5s1","[Kr] 5s2","[Kr] 4d1 5s2","[Kr] 4d2 5s2","[Kr] 4d4 5s1","[Kr] 4d5 5s1","[Kr] 4d5 5s2","[Kr] 4d7 5s1","[Kr] 4d8 5s1","[Kr] 4d10 5s0","[Kr] 4d105s1","[Kr] 4d10 5s2","[Kr] 4d10 5s2 5p1","[Kr] 4d10 5s2 5p2","[Kr] 4d10 5s2 5p3","[Kr] 4d10 5s2 5p4","[Kr] 4d10 5s2 5p5","[Kr] 4d10 5s2 5p6","[Xe] 6s1","[Xe] 6s2","[Xe] 5d1 6s2","[Xe] 4f1 5d1 6s2","[Xe] 4f3 6s2","[Xe] 4f4 6s2","[Xe] 4f5 6s2","[Xe] 4f6 6s2","[Xe] 4f7 6s2","[Xe] 4f7 5d1 6s2","[Xe] 4f9 6s2","[Xe] 4f10 6s2","[Xe] 4f11 6s2","[Xe] 4f12 6s2","[Xe] 4f13 6s2","[Xe] 4f14 6s2","[Xe] 4f14 5d1 6s2","[Xe] 4f14 5d2 6s2","[Xe] 4f14 5d3 6s2","[Xe] 4f14 5d4 6s2","[Xe] 4f14 5d5 6s2","[Xe] 4f14 5d6 6s2","[Xe] 4f14 5d7 6s2","[Xe] 4f14 5d9 6s1","[Xe] 4f14 5d10 6s1","[Xe] 4f14 5d10 6s2","[Xe] 4f14 5d10 6s2 6p1","[Xe] 4f14 5d10 6s2 6p2","[Xe] 4f14 5d10 6s2 6p3","[Xe] 4f14 5d10 6s2 6p4","[Xe] 4f14 5d10 6s2 6p5","[Xe] 4f14 5d10 6s2 6p6","[Rn] 7s1","[Rn] 7s2","[Rn] 6d1 7s2","[Rn] 6d2 7s2","[Rn] 5f2 6d1 7s2","[Rn] 5f3 6d1 7s2","[Rn] 5f4 6d1 7s2","[Rn] 5f6 7s2","[Rn] 5f7 7s2","[Rn] 5f7 6d1 7s2","[Rn] 5f9 s2","[Rn] 5f10 7s2","[Rn] 5f11 7s2","[Rn] 5f12 7s2","[Rn] 5f13 7s2","[Rn] 5f14 7s2","[Rn] 5f14 6d1 7s2, [Rn] 5f14 7s2 7p1","[Rn] 5f14 6d2 7s2","[Rn] 5f14 6d3 7s2","[Rn] 5f14 6d4 7s2","[Rn] 5f14 6d5 7s2","[Rn] 5f14 6d6 7s2","[Rn] 5f14 6d7 7s2","[Rn] 5f14 6d8 7s2","[Rn] 5f14 6d10 7s1","[Rn] 5f14 6d10 7s2","[Rn] 5f14 6d10 7s2 7p1","[Rn] 5f14 6d10 7s2 7p2","[Rn] 5f14 6d10 7s2 7p3","[Rn] 5f14 6d10 7s2 7p4","[Rn] 5f14 6d10 7s2 7p5","[Rn] 5f14 6d10 7s2 7p6"};

// Phase [-], Col:8
aggregatstate:={1,1,2,2,2,2,1,1,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};

// Melting Point [K], Col:9
meltingpoint:={14.01,0,453.69,1560,2349,4000,63.15,54.36,53.53,24.56,370.87,923,933.47,1687,317.30,388.36,171.6,83.8,336.53,1115,1814,1941,2180,1519,1811,1768,1728,1357.77,692.88,302.9146,1211.4,0,453,265.8,115.79,312.46,1050,1799,2128,2750,2896,2430,2607,2237,1828.05,1234.93,594.22,429.75,505.8,903.78,722.66,386.85,161.4,301.59,1000,1193,1068,1208,1297,1315,1345,1099,1585,1629,1680,1734,1802,1818,1097,1925,2506,3290,3695,3459,3306,2719,2041.4,1337.33,234.43,577,600.61,544.7,527,575,202,281,973,1323,2115,1841,1405.3,917,912.5,1449,1613,1259,1173,1133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Boiling Point [K], Col:10
boilingpoint:={20.28,4.22,1560,2742,4200,4300,77.36,90.2,85.03,27.07,1156,1363,2792,3528,550,717.87,239.11,87.3,1032,1757,3109,3560,3680,2944,2334,3134,3200,3186,2835,1180,2673,3106,887,958,332,119.93,961,1655,3609,4682,5017,4912,4538,4423,3968,3236,2435,1040,2345,2875,1860,1261,457.4,165.03,944,2170,3737,3716,3793,3347,3273,2067,1802,3546,3503,2840,2993,3141,2223,1469,3675,4876,5731,6203,5869,5285,4701,4098,3192,629.88,1746,2022,1837,1235,610,211.3,890,2010,3471,5061,4300,4404,4273,3501,2880,3383,2900,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Heat of Vaporization [kJ/mol], Col:11
boilingenthalpy:={0.9,0.084,136,309,508,0,5.58,5.58,6.32,1.9,97.4,132,284,383,51.9,45,20.4,6.52,79.1,153,310,457,444,347,225,354,390,379,305,115,256,330,32.4,95.5,30,9.03,69,141,390,591,694,617,550,619,531,380,254,100,225,290,193,114,41.6,12.6,66.1,149,400,398,331,289,290,192,176,301,391,280,251,280,247,159,414,648,753,774,707,678,564,510,342,58.2,162,177,179,100,40,16.4,65,125,400,530,470,417.1,1420,325,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Heat of Fusion [kJ/mol], Col:12
meltingenthalpy:={0.558,0.02,3,7.95,50,0,0.36,0.222,0.2552,0.34,2.6,8.7,10.7,50.66,0.64,1.713,3.2,1.18,2.334,8.54,16,18.7,21.5,16.93,13.2,13.8,17.2,17.7,13.3,7.4,5.59,31.8,27.7,5.4,5.8,1.64,2.19,8,11.4,16.9,26.8,36,23,25.7,21.7,16.7,11.3,6.2,3.26,7.03,19.7,17.5,7.76,2.3,2.09,8.0,6.2,5.5,6.9,7.1,7.7,8.6,9.2,10.0,10.8,11.06,17,19.9,16.8,7.6,22,25.5,36,35.2,33,31.8,26,19.6,12.55,2.37,4.2,4.85,10.9,13,6,2.89,2,8,14,16,15,15.5,39.91,11.48,14.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Heat Capacity [J/(kg.K)], Col:13
heatcapacity:={14304,5193,3582,1825,1026,709,1040,918,824,1030,1228,1023,897,705,769,710,479,520,757,647,568,523,489,449,479,449,421,444,385,388,371,320,329,321,474,248,363,301,298,278,265,251,0,238,243,244,235,232,233,228,207,202,214,158,242,204,195,192,193,190,0,197,182,236,182,170,165,168,160,155,154,144,140,132,137,130,131,133,129,140,129,129,122,0,0,94,0,94,120,113,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Group [-], Col:14
group:={"1","18","1","2","13","14","15","16","17","18","1","2","13","14","15","16","17","18","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","1","2","3","La","La","La","La","La","La","La","La","La","La","La","La","La","La","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","1","2","3","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","Ac","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"};

// Period [-], Col:15
period:={"1","1","2","2","2","2","2","2","2","2","3","3","3","3","3","3","3","3","4","4","4","4","4","4","4","4","4","4","4","4","4","4","4","4","4","4","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","6","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7","7"};

// Block [-], Col:16
block:={"s","s","s","s","p","p","p","p","p","p","s","s","p","p","p","p","p","p","s","s","d","d","d","d","d","d","d","d","d","d","p","p","p","p","p","p","s","s","d","d","d","d","d","d","d","d","d","d","p","p","p","p","p","p","s","s","d","f","f","f","f","f","f","f","f","f","f","f","f","f","f","d","d","d","d","d","d","d","d","d","p","p","p","p","p","p","s","s","d","f","f","f","f","f","f","f","f","f","f","f","f","f","f","d","d","d","d","d","d","d","d","d","d","d","d","d","d","d"};

// Category [-], Col:17
family:={5,1,2,3,4,5,5,5,6,1,2,3,7,4,5,5,6,1,2,3,8,8,8,8,8,8,8,8,8,8,7,4,4,4,6,1,2,3,8,8,8,8,8,8,8,8,8,8,7,7,4,4,6,1,2,3,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,7,7,7,7,6,1,2,3,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,11,11,11,8,11,11,11,11,11,11};

// Crystal Structure [-], Col:18
crystal:={1,1,2,3,4,5,6,7,1,8,2,6,8,9,10,10,10,8,2,8,6,6,2,2,11,11,6,8,8,6,11,9,12,11,10,8,2,8,6,6,2,2,6,6,8,8,8,6,13,13,14,14,10,8,2,2,6,8,6,6,11,14,2,6,6,6,6,6,6,8,6,6,2,2,6,6,8,8,8,15,6,8,14,11,11,8,11,2,8,8,13,10,10,16,6,6,6,6,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11};

// Atomic Volume [cm^3/mol], Col:19
atomicvolume:={11.42,21.00,13.02,4.85,4.39,5.31,13.54,17.336,11.20,13.23,23.78,14.00,10.00,12.06,17.02,15.53,17.39,22.56,45.94,26.20,15.00,10.64,8.32,7.23,7.35,7.09,6.67,6.59,7.11,9.16,11.8,13.63,12.95,16.42,19.78,27.99,55.76,33.94,19.88,14.02,10.83,9.38,8.53,8.17,8.28,8.56,10.27,13.00,15.76,16.29,18.19,20.46,25.72,35.92,70.94,38.16,22.39,20.69,20.80,20.59,20.10,19.98,28.97,19.90,19.30,19.01,18.74,18.46,19.1,24.84,17.78,13.44,10.85,9.47,8.86,8.42,8.52,9.09,10.21,14.09,17.22,18.26,21.31,22.97,0,50.50,0,41.09,22.55,19.80,15.18,12.49,11.59,12.29,1.778,18.05,16.84,16.50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Atomic Radius [pm], Col:20
atomradius:={53,31,167,112,84,67,56,48,42,38,190,145,118,111,98,88,79,71,243,194,184,176,171,166,161,156,152,149,145,142,136,125,114,103,94,88,265,219,212,206,164,190,185,178,173,169,165,161,156,145,133,123,115,108,298,253,195,185,247,206,205,238,231,233,225,228,226,226,222,222,217,208,200,193,188,185,180,177,174,171,156,154,143,135,127,120,0,215,195,180,180,138.5,130,151,184,174.3,170,186,203,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Covalent Radius [pm], Col:21
covalentradii:={31,28,128,96,82,76,71,66,71,58,154,141,121,111,107,102.5,102,106,203,176,170,160,153,139,139,123,126,124,132,122,122,122,119,120,120,116,220,195,190,206,137,154,147,146,142,139,145,144,144,139,139,138,139,140,244,215,207,204,203,201,199,198,198,196,194,192,192,189,190,187,187,150,138,162,159,128,141,136,136,132,145,146,148,140,150,150,260,221,215,206,200,142,0,187,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Van-der-Waals-Radius [pm], Col:22
vanderwaals:={120,140,182,153,192,170,155,152,147,154,227,173,184,210,180,180,175,188,275,231,0,0,0,0,0,0,0,163,140,139,187,211,185,190,185,202,303,249,0,0,0,0,0,0,0,163,172,158,193,217,206,206,198,216,343,268,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,166,155,196,202,0,197,202,220,348,283,0,0,0,0,0,0,228.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Thermal Conductivity [W/(m*K)], Col:23
thermalconductivity:={0.1805,0.1513,85,25,27,0,0.02583,0.02658,0.0279,0.0491,140,160,235,150,0.236,0.205,0.0089,0.01772,100,200,16,22,0,449,7.8,80,100,91,400,120,29,60,50,0.52,0.12,0.00949,58,35,17,22.7,54,139,51,120,150,72,430,97,81.6,67,24,3,0.449,0.00569,36,18,13,11,13,17,15,13,14,11,11,11,16,15,16.8,39,16,23,57,170,48,88,150,72,320,8.3,46,35,8,20,2,0.00364,0,19,12,54,47,27.6,6.40,6.74,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Electrical Conductivity [10^6 A/(V*m)], Col:24
electroconductivity:={0,0,10.6,190,0.0001,0,0,0,0,0,21,22.7,37.7,1000,0,0,0,0,14.3,29.4,1.81,2.5,5,7.87,0.694,10,16.7,13.9,58.1,16.7,7.44,0.0000021,3.03,0,0,0,7.52,7.41,1.66,2.36,6.58,18.2,4.54,14.1,23.3,9.26,61.35,14.3,12.5,8.69,2.5,10000,0,0,4.76,2.94,1.626,1.35,1.43,1.56,1.33,1.06,1.11,0.763,0.870,1.08,1.23,1.16,1.477,4.0,1.72,3.12,7.61,18.52,5.56,10.9,19.7,9.43,45.5,1.04,6.67,4.76,0.769,2.5,0,0,0,1,0,6.67,5.56,2.24,0.00000082,0.68,0.000147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// First Ionisation Energy [kJ/mol], Col:25
firstionenergy:={1312,2372,520.2,1825,800,1086,1402,1313.9,1681,2080,495.8,737.7,577.5,786.5,1011.8,999.6,1251.2,1520.8,418.8,589.8,633.1,658.8,650.9,652.9,717.3,762.5,760.4,737.1,745.5,906.4,578.8,762,947,941,1139.9,1350.8,403,549.5,600,640.1,652.1,684.3,702,710.2,719.7,804.4,731.0,867.8,558.3,708.6,834,869.3,1008.4,1170.4,375.7,502.9,538.1,534.4,527,533.1,540,544.5,547.1,593.4,565.8,573.0,581,589,596.7,603.4,523.5,658.5,761,770,760,840,880,870,890.1,1007.1,589.4,715.6,703,812.1,920,1037,380,509.3,499,578,568,597.6,604.5,584.7,578,581,0,0,613.84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Elektronegativity [-], Col:26
electronegativity:={2.2,5.2,0.98,1.57,2.04,2.55,3.04,3.44,4.0,0,0.93,1.31,1.61,1.90,2.19,2.58,3.16,0,0.82,1,1.36,1.54,1.63,1.66,1.55,1.83,1.88,1.91,1.9,1.65,1.81,2.01,2.18,2.55,2.96,0,0.82,0.95,1.22,1.33,1.6,2.16,2.1,2.2,2.28,2.2,1.93,1.69,1.78,1.96,2.05,2.1,2.66,0,0.79,0.89,1.1,1.12,1.13,1.14,0,1.17,0,1.2,0,1.22,1.23,1.24,1.25,0,1,1.3,1.5,1.7,1.9,2.2,2.2,2.2,2.4,1.9,1.8,1.8,1.9,2,2.2,0,0.7,0.9,1.1,1.3,1.5,1.7,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Oxide [-], Col:27
oxide:={3,1,2,3,4,4,5,6,6,6,2,7,3,3,4,5,6,6,2,2,8,3,6,6,5,3,3,9,9,6,6,3,3,5,6,6,2,2,8,6,6,6,5,6,3,9,3,9,6,6,6,4,6,6,2,7,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,3,9,6,3,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6};

// Discovery [Year], Col:28
discovery:={1766,1895,1817,1798,1808,0,1772,1774,1886,1898,1807,1755,1827,1824,1669,0,1774,1894,1807,1808,1878,1791,1801,1797,1774,0,1735,1751,0,0,1875,1886,0,1817,1826,1898,1861,1808,1794,1789,1801,1782,1937,1844,1803,1803,0,1817,1863,0,0,1782,1811,1898,1860,1808,1839,1803,1885,1885,1945,1879,1901,1880,1843,1886,1878,1842,1879,1878,1907,1923,1802,1783,1925,1803,1803,1735,0,0,1861,0,0,1898,1940,1900,1939,1898,1899,1828,1913,1789,1940,1940,1944,1944,1949,1950,1952,1952,1955,1958,1961,1964,1967,1974,1981,1984,1982,1994,1994,1996,2003,1999,2003,2000,2010,2002};

// Color Index (META INFO) [-], Col:29
colorindex:={1,2,3,4,7,1,1,1,8,2,3,4,6,7,1,1,8,2,3,4,5,5,5,5,5,5,5,5,5,5,6,7,7,1,8,2,3,4,5,5,5,5,5,5,5,5,5,5,6,6,7,7,8,2,3,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,5,5,5,5,5,5,5,5,6,6,6,7,8,2,3,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,5,5,5,5,11,11,11,5,11,11,11,11,11,11};

// CAS Number [-], Col:30
CASnumber:={"1333-74-0","7440-59-7","7439-93-2","7440-41-7","7440-42-8","7440-44-0","7727-37-9","7782-44-7","7782-41-4","7440-01-9","7440-23-5","7439-95-4","7429-90-5","7440-21-3","7723-14-0","7704-34-9","7782-50-5","7440-37-1","7440-09-7","7440-70-2","7440-20-2","7440-32-6","7440-62-2","7440-47-3","7439-96-5","7439-89-6","7440-48-4","7440-02-0","7440-50-8","7440-66-6","7440-55-3","7440-56-4","7440-38-2","7782-49-2","7726-95-6","7439-90-9","7440-17-7","7440-24-6","7440-65-5","7440-67-7","7440-03-1","7439-98-7","7440-26-8","7440-18-8","7440-16-6","7440-05-3","7440-22-4","7440-43-9","7440-74-6","7440-31-5","7440-36-0","13494-80-9","7553-56-2","7440-63-3","7440-46-2","7440-39-3","7439-91-0","7440-45-1","7440-10-0","7440-00-8","7440-12-2","7440-19-9","7440-53-1","7440-54-2","7440-27-9","7429-91-6","7440-60-0","7440-52-0","7440-30-4","7440-64-4","7439-94-3","7440-58-6","7440-25-7","7440-33-7","7440-15-5","7440-04-2","7439-88-5","7440-06-4","7440-57-5","7439-97-6","7440-28-0","7439-92-1","7440-69-9","7440-08-6","7440-68-8","10043-92-2","7440-73-5","7440-14-4","7440-34-8","7440-29-1","7440-13-3","7440-61-1","7439-99-8","7440-07-5","7440-35-9","7440-51-9","7440-40-6","7440-71-3","7429-92-7","7440-72-4","7440-11-1","10028-14-5","22537-19-5","53850-36-5","53850-35-4","54038-81-2","54037-14-8","54037-57-9","54038-01-6","54083-77-1","54386-24-2","54084-26-3","54084-70-7","54085-16-4","54085-64-2","54100-71-9","54101-14-3","54144-19-3"};

// Mass on Earth Shell [mg/kg], Col:31
earthmass:={1400,0.008,20,2.8,10,200,19,461000,585,0.005,23600,23300,82300,282000,1050,350,145,3.5,20900,41500,22,5650,120,102,950,56300,25,84,60,70,19,1.5,1.8,0.05,2.4,0.0004,90,370,33,165,20,1.2,0.000000003,0.001,0.001,0.015,0.075,0.159,0.25,2.3,0.2,0.001,0.45,0.00003,3,425,39,66.5,9.2,41.5,0.0000000000000000002,7.05,2,6.2,1.2,5.2,1.3,3.5,0.52,3.2,0.8,3,2,1.3,0.0007,0.002,0.001,0.005,0.004,0.085,0.85,14,0.009,0.0000000002,0.00000000000000000003,0.0000000000004,0.000000000000000001,0.0000009,0.00000000055,9.6,0.0000014,2.7,0.000000000003,0.00000000003,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Look Alike [-], Col:32
lookalike:={0,1,2,3,4,5,1,1,6,1,7,7,8,9,10,11,12,1,7,7,7,13,14,13,15,16,17,18,19,20,7,21,22,23,24,25,7,26,7,7,27,28,29,26,26,26,30,29,31,31,31,32,33,25,34,3,7,7,35,35,36,7,7,7,7,7,7,7,37,7,7,38,39,40,21,41,7,42,43,7,7,44,45,8,36,25,46,47,8,7,48,7,8,49,50,50,51,52,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46};

// Language Labels, Col: 2
langreslist:={"Help","Periodic Table","Atom number","Click=Select element ; ENTER=Element properties ; HOME=Table ; Drag=Move table ; Mol menu=Molar mass","Z= Menu=Search Atom N° ; Plot=Statistical Plot","By ()","Rev. by Miguel Toro and Pelayo 'Dory' Méndez","Synthetic element","General","Known since ancient world","Atomic","Physical","Chemical","","","","Choose the property to plot:","1.) Earth mass abundance","2.) Atomic volume","3.) Density","4.) Atomic radius","5.) Melting point","6.) Boiling point","Earth","Volume","Density","Radius","Melt","Boil","List","Plot","","Help","About","Quit","Property to Plot","Connect dots"};

// Units, Col: 3
unitlist:={"-","-","u","g/mol","g/cm^3","-","-","-","K","K","kJ/mol","kJ/mol","J/(kg*K)","-","-","-","-","-","cm^3/mol","pm","pm","pm","W/(m*K)","10^6 A/(V*m)","kJ/mol","-","-","Year","-","-","mg/kg","-"};

// Header Labels, Col: 2
headerlist:={"Name","Element","Atomic Weight","Molar Mass","Density","Oxidation States","Electron Configuration","Phase","Melting Point","Boiling Point","Heat of Vaporization","Heat of Fusion","Heat Capacity","Group","Period","Block","Category","Crystal Structure","Atomic Volume","Atomic Radius","Covalent Radius","Van-der-Waals Radius","Thermal Conductivity","Electrical Conductivity","First Ionisation Energy","Electronegativity","Oxide","Discovery","Color Index (META INFO)","CAS Number","Mass on Earth Shell","Looks Like"};

distinct_aggregatstate:={"gas","solid","liquid","-"};

distinct_family:={"Noble gases","Alkali metals","Alkaline earth metals","Post-transition","Nonmetals","Halogens","Metalloids","Transition metals","Lanthanide","Actinide","unknown"};

distinct_crystal:={"diamagnetic","body-centered cubic","hexagonal","rhomboedric","hexagonal, face-centered cubic","hexagonal","cubic","face-centered cubic","diamond","orthorhombic","-","trigonal (gray)","tetragonal","trigonal","liquid","monoclinic"};

distinct_oxide:={"none","strong basic","amphoter","light acid","strong acid","-","basic","mild basic","light basic"};

distinct_lookalike:={"colorless gas","silvery white/gray","white-gray metallic","black","black (G), colorless (D), yelllow-brown (L)","very pale yellow gas","silvery white","silvery","darkgray, bluish color","white-beige (W), darkred (R), black (S)","yellow","yellow-green","silvery metallic","metallic gray bluish shimmery","silvery metallic (iron white)","metallic shimmery with a gray color","metallic with a bluish-gray color","shimmery, metallic, silvery","salmonpink metallic","bluish pale gray","grayish white","metallic gray, yellow or black","gray, shimmery","gas: red-brown, liquid: red-brown, solid: metallic shimmery","colorless","silvery white metallic","gray metallic shimmery","gray metallic","silvery gray metallic","whiteshimmery, metallic","silvery shimmery gray","silverwhite, metallic shimmery","gas: dark-violet, solid: gray, shimmery","silverwhite shimmery, with low acid golden yellow","silvery white, yellowish color","metallic","silvery gray","metallicgray","gray","grayish white, shimmery","bluish gray","gray-white","metallic yellow","bluish white","shimmery redish white","unknown","silvery-white-metallic","bright, silvery, metallic shimmery","silvery metal","silvery-white metal","silverwhite","silveryes metal"};

// Colors
distinct_colors:={#00EE00,#66AAFF,#FFAA00,#F3F300,#FFC1DC,#00DDBB,#FF93C2,#99BBAA,#B2AAFF,#B2F0FF,#EFEFEF};

// Element Position
position:= [
   [  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2 ],
   [  3,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  6,  7,  8,  9, 10 ],
   [ 11, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 14, 15, 16, 17, 18 ],
   [ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 ],
   [ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 ],
   [ 55, 56, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 ],
   [ 87, 88, 89,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118 ],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
   [  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,  0 ],
   [  0,  0,  0, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,  0 ]
   ];
// ********************************************************************************
// ********************************************************************************
// ** You can safely replace entire content above with this export
// ** it may change the language of the application
// ********************************************************************************
// ********************************************************************************

Credit:={"Only to be on par with the HP48SX (as extension card)",
         "that was later integrated on the HP48GX",
         "while using the power and screen tech of the Prime",
         "based on & inspirated by:",
         " ҉ Elements ҉ HP Prime by Mickaël Nicotera",
         "",
         "Revised by Miguel Toro",
         "Dark Mode, optimisation, correction, and data revision",
         "by 'Dory' Méndez",
         "",
         "Message Loop adapted from WaitLab jfs 2014-06-04",
         "",
         "Thanks to HP for their outstanding calculator hardware",
         "...and Joseph K. Horn",
         "",
         "Data from en.wikipedia.org, updated as of April 2025"};
//
// function declarations
//
DoLoop(Gr);
Event_InitApp(Gr);
Event_Redraw(Gr);
Event_KeyPress(Gr,KeyCode);
Event_MenuClick(Gr,Index);
Event_MouseClick(Gr,x,y);
Event_DragMove(Gr,x,y);
//
build_table(Gr);
select_element(Gr,posx,posy);
show_element(Gr,sel,y);
show_list(Gr,sort_alpha,posx,posy);
show_about(Gr);
show_plot(Gr,prop,sel,con_dots);
prop_plot();
selected_plot(x,y);
//
// Key Codes Constants
//
K_APPS=0, K_SYMB=1, K_ARROWUP=2, K_HELP=3, K_ESC=4, K_HOME=5;
K_PLOT=6, K_ARROWLEFT=7, K_ARROWRIGHT=8, K_VIEW=9, K_CAS=10;
K_NUM=11, K_ARROWDOWN=12, K_MENU=13, K_A=14, K_B=15, K_C=16;
K_D=17, K_E=18, K_DEL=19, K_F=20, K_G=21, K_H=22, K_I=23, K_J=25;
K_K=26, K_M=27, K_N=28, K_O=29, K_ENTER=30, K_P=31, K_Q=32, K_R=33;
K_S=34, K_T=35, K_ALPHA=36, K_U=37, K_V=38, K_W=39, K_X=40;
K_SHIFT=41, K_Y=42, K_Z=43, K_HASH=44, K_DOUBLEDOT=45, K_OFF=46;
K_NOTES=47, K_EQUAL=48, K_UNDERSCORE=49, K_ANS=50;
//
// Other Constants
//
HSIZE:=400; // Main Screen, Total image horizontal size
VSIZE:=560; // Property Pages, total vertical size
LSIZE:=1640; // Entire List, total vertical size
el_width:=22; // width of an element in main view
el_height:=21; // height of an element in main view
text_offset:=6;
MAX_ELEMENTS:=118;
LANG_ID:=0;
LIGHTBLUE:=#007CF0;
LIGHTGRAY:=#D5D5D5;
BLACK:=#000000;
WHITE:=#FFFFFF;
linH:=13;
main_window:=G1;       // periodic table
property_window:=G2;  // individual element pages
list_window:=G3;          // full sortable list
about_window:=G4;      // dedicated
plot_window:=G5;         // plot (not sufficient accessible plotting App, not enough flexibility, and too much dependency)
//
// Globals (to the app)
// true globals would have an export in front of
//
//  Variables to manage the scrolling
MainWndBeg:=0;
MainWndEnd:=320;
MainOffset;
MainSmooth:=1;
MainDOffset:=0;

// Property Window
PropWndBeg:=0;
PropWndEnd:=320;
PropOffset;
PropSmooth:=1;
PropDOffset:=0;

// List Window
ListWndBeg:=0;
ListWndEnd:=320;
ListOffset;
ListSmooth:=1;
ListDOffset:=0;
LCurrSortOrder:=0;
new_order; // list

previous:=0; // last selected element
selected:=Z; // current selected element
selected_prop:=0;
connect_dots:=1;
appmenu:={langreslist(LANG_ID+30),langreslist(LANG_ID+31),langreslist(LANG_ID+32),langreslist(LANG_ID+33),langreslist(LANG_ID+34),langreslist(LANG_ID+35)};
//
// helpers
//
move_up_to();
move_down_to();
up_arrow(Gr,x,y,color);
left_arrow(Gr,x,y,color);
right_arrow(Gr,x,y,color);
down_arrow(Gr,x,y,color);
random_color();
center_text(txt,Gr,x_width,y);
GetTextExtent(txt,fsize);
ralign_text(txt,Gr,x,y);
chaos();
cross_point(Gr,x,y,color);
check_mark(Gr,x,y,color,on_off);
//
// main loop
//
export PTable() begin
  Event_InitApp(main_window);
  DoLoop(main_window);
end;
//
// Start Subroutines
//
Event_InitApp(Gr) begin
  //  create menu
  drawmenu(appmenu);
  // create initial screen
  build_table(Gr);
  // draw the screen first time
  blit_p(G0,Gr,0,0,320,220);
end;
//
// refresh the screen (after each loop)
//
Event_Redraw(Gr)
begin
  local i,j;
  case
    if (Gr==main_window) then blit_p(G0,Gr,MainWndBeg,0,MainWndEnd,220); drawmenu(appmenu); end;
    if (Gr==property_window) then blit_p(G0,Gr,0,PropWndBeg,320,PropWndEnd); end;
    if (Gr==list_window) then blit_p(G0,Gr,0,ListWndBeg,320,ListWndEnd); end;
    if (Gr==about_window) then blit_p(G0,Gr,0,0,320,240); end;
    if (Gr==plot_window) then blit_p(G0,Gr,0,0,320,240); end;
  end;
end;
//
// put here code you want to execute
// if a mouse click (touch) on the screen was detected...
//
Event_MouseClick(Gr,x,y) begin
  case
    if Gr==main_window then select_element(Gr,x,y,0); end;
    if Gr==property_window then show_element(property_window,selected,y); end;
    if Gr==list_window then
      if y<13 then
        if 0<x<=30 then LCurrSortOrder:=0;
        else if 71<x<=180 then LCurrSortOrder:=1; end; end;
        show_list(Gr,LCurrSortOrder,x,y);
      else show_list(Gr,LCurrSortOrder,x,y); end;
    end;

    if Gr==about_window then // DEBUG:
    end;

    if Gr==plot_window then
      selected:=selected_plot(x,y);
      show_plot(Gr,selected_prop,selected,connect_dots);
    end;
  end;
end;
//
// Drag Move
//
Event_DragMove(Gr,x1,y1,x0,y0) begin
  case
    if Gr==main_window then
      MainOffset:=ip((x0-x1)/MainSmooth);
      if (MainWndEnd+MainOffset)>HSIZE then
        MainWndBeg:=HSIZE-320;
        MainWndEnd:=HSIZE;
        MainDOffset:=HSIZE-320-2;
      else
        if (MainWndBeg+MainOffset)<0 then
          MainWndBeg:=0;
          MainWndEnd:=320;
          MainDOffset:=0;
        else
          MainWndBeg:=MainWndBeg+MainOffset;
          MainWndEnd:=MainWndEnd+MainOffset;
          MainDOffset:=MainDOffset+MainOffset;
        end;
      end;
    end;
    if Gr==property_window then
      PropOffset:=ip((y0-y1)/PropSmooth);
      if abs(PropOffset)>0 then
        if (PropWndEnd+PropOffset)>VSIZE then
          PropWndBeg:=VSIZE-320;
          PropWndEnd:=VSIZE;
          PropDOffset:=VSIZE-320-2;
        else
          if (PropWndBeg+PropOffset)<0 then
            PropWndBeg:=0;
            PropWndEnd:=320;
            PropDOffset:=0;
          else
            PropWndBeg:=PropWndBeg+PropOffset;
            PropWndEnd:=PropWndEnd+PropOffset;
            PropDOffset:=PropDOffset+PropOffset;
          end;
        end;
      else
        local mov:=x1-x0;
        if mov≠0 then
          // move fast through elements
          selected:=selected+ip(mov/2);
          // boundaries
          if selected<1 then selected:=MAX_ELEMENTS;
          else if selected>MAX_ELEMENTS then selected:=1; end; end;
          show_element(property_window,selected,0);
        end;
      end;
    end;
    if Gr==list_window then
      ListOffset:=ip((y0-y1)/ListSmooth);
      if (ListWndEnd+ListOffset)>LSIZE then
        ListWndBeg:=LSIZE-320;
        ListWndEnd:=LSIZE;
        ListDOffset:=LSIZE-320-2;
      else
        if (ListWndBeg+ListOffset)<0 then
          ListWndBeg:=0;
          ListWndEnd:=320;
          ListDOffset:=0;
        else
          ListWndBeg:=ListWndBeg+ListOffset;
          ListWndEnd:=ListWndEnd+ListOffset;
          ListDOffset:=ListDOffset+ListOffset;
        end;
      end;
    end;
    if Gr==about_window then // DEBUG:
    end;
    if Gr==plot_window then // DEBUG:
    end;
  end;
end;
//
// Soft Menu Handler
//
Event_MenuClick(Gr,Index) begin
  case
    if Gr==main_window then
      case
        if Index==1 then // <List>
            show_list(list_window,0,0,0);
            DoLoop(list_window);
        end;
        if Index==2 then // <Plot>
            // prop_plot: select property
            selected_prop:=prop_plot;
            show_plot(plot_window,selected_prop,selected,connect_dots);
            DoLoop(plot_window);
        end;
        if Index==3 then  // <>
        end;
        if Index==4 then // <Help>
        end;
        if Index==5 then // <About>
            show_about(about_window);
            DoLoop(about_window);
        end;
        if Index==6 then //<Quit>
          // trigger DoLoop to exit condition;
          Event_KeyPress(Gr,K_ESC);
        end; // if
      end; // case
    end;
    if Gr==plot_window then
      // if we are above the checkmark or the text we toggle the checkmark
      // cheat as if it were menu 5 or menu 6
      if 3<Index<6 then // Above Checkmark?
        connect_dots:=NOT connect_dots;
        show_plot(plot_window,selected_prop,selected,connect_dots);
      end;
    end; // if
  end; // case
end;
//
// Keyboard Handler
//
Event_KeyPress(Gr,KeyCode) begin
  case
    // Main Window
    if Gr==main_window then
      case
        if KeyCode==K_ENTER then
          show_element(property_window,selected,0);
          DoLoop(property_window);
        end;
        if KeyCode==K_PLOT then Event_MenuClick(Gr,2) end;
        if KeyCode==K_ARROWUP then
          // select the visually upper element in table
          previous:=selected;
          selected:=move_up_to(previous);
          select_element(Gr,0,0,selected);
          Z:=selected;
        end;
        if KeyCode==K_ESC then break; end;
        if KeyCode==K_ARROWLEFT then
          // select previous element in table
          previous:=selected;
          if previous==1 then selected:=MAX_ELEMENTS;
          else selected:=selected-1; end;
          select_element(Gr,0,0,selected);
          Z:=selected;
        end;
        if KeyCode==K_ARROWRIGHT then
          // select the next element in table
          previous:=selected;
          if previous==MAX_ELEMENTS then selected:=1;
          else selected:=selected+1; end;
          select_element(Gr,0,0,selected);
          Z:=selected;
        end;
        if KeyCode==K_ARROWDOWN then
          // select the visually lower element in table
          previous:=selected;
          selected:=move_down_to(previous);
          select_element(Gr,0,0,selected);
          Z:=selected;
        end;
      end;
    end;
    // Property Window
    if Gr==property_window then
      case
        // Go back to the table view
        if KeyCode==K_HOME then
          // Go back to the table view
          // (call us again this time with breaking the Message Loop)
          Event_KeyPress(Gr,K_ESC)
        end;
        if KeyCode==K_ARROWUP then
          PropWndBeg:=0;
          PropWndEnd:=320;
          PropDOffset:=0
        end;
        if KeyCode==K_ARROWDOWN then
          PropWndBeg:=VSIZE-320;
          PropWndEnd:=VSIZE;
          PropDOffset:=VSIZE-320-2;
        end;
        if KeyCode==K_ARROWLEFT then
          // Go one atom number lower or else underflow to '118 UUo' (MAX_ELEMENTS)
          previous:=selected;
          selected:=selected-1;
          if selected<1 then selected:=MAX_ELEMENTS; end;
          show_element(property_window,selected,0);
        end;
        if KeyCode==K_ARROWRIGHT then
          // Go one atom number higher or else overflow to '1 H' (1)
          previous:=selected;
          selected:=selected+1;
          if selected>MAX_ELEMENTS then selected:=1; end;
          show_element(property_window,selected,0);
        end;
      end;
    end;
    // List Window
    if Gr==list_window then
      case
        // Go back to the table view
        if KeyCode==K_HOME then
          // Go back to the table view
          // (call us again this time with breaking the Message Loop)
          Event_KeyPress(Gr,K_ESC)
        end;
        if KeyCode==K_ARROWUP then
          ListWndBeg:=0;
          ListWndEnd:=320;
          ListDOffset:=0
        end;
        if KeyCode==K_ARROWDOWN then
          ListWndBeg:=LSIZE-320;
          ListWndEnd:=LSIZE;
          ListDOffset:=LSIZE-320-2;
        end;
        if KeyCode==K_ENTER then
          if 0<selected<MAX_ELEMENTS then
            if LCurrSortOrder==0 then show_element(property_window,selected,0);
            else show_element(property_window,pos(elementname, new_order(selected)),0); end;
            DoLoop(property_window);
          end;
        end;
      end;
    end;
    // Credit Window
    if Gr==about_window then
      case
        // Go back to the table view
        if KeyCode==K_HOME then
          // Go back to the table view
          // (call us again this time with breaking the Message Loop)
          Event_KeyPress(Gr,K_ESC);
          break;
        end;
      end;
    end;
    // Plot window
    if Gr==plot_window then
      case
        // Go back to the table view
        if KeyCode==K_HOME then
          // Go back to the table view
          // (call us again this time with breaking the Message Loop)
          Event_KeyPress(Gr,K_ESC);
          break;
        end;
        if KeyCode==K_ARROWLEFT then
          // Go one atom number lower or else underflow to '118 UUo' (MAX_ELEMENTS)
          previous:=selected;
          selected:=selected-1;
          if selected<1 then selected:=MAX_ELEMENTS; end;
          show_plot(Gr,selected_prop,selected,connect_dots);
        end;
        if KeyCode==K_ARROWRIGHT then
          // Go one atom number higher or else overflow to '1 H' (1)
          previous:=selected;
          selected:=selected+1;
          if selected>MAX_ELEMENTS then selected:=1; end;
          show_plot(Gr,selected_prop,selected,connect_dots);
        end;
      end;
    end;
  end;
end;
//
// select the previous adjacent visually
//
move_up_to(selEl) begin
  case
    if selEl==1 then return 87; end;
    if selEl==2 then return 118; end;
    if selEl==3 then return 1; end;
    if selEl==4 then return 88; end;
    if selEl>=5 and selEl<10 then return selEl+94; end;
    if selEl>=10 and selEl<21 then return selEl-8; end;
    if selEl>=21 and selEl<31 then return selEl+68; end;
    if selEl>=58 and selEl<72 then return selEl+46; end;
    if selEl>=71 and selEl<=MAX_ELEMENTS then return selEl-32; end;
    default return selEl-18;
  end;
end;
//
// select the adjacent visually
//
move_down_to(selEl) begin
  case
    if selEl==1 then return 3; end;
    if selEl>=2 and selEl<13 then return selEl+8; end;
    if selEl>=40 and selEl<90 then return selEl+32; end;
    if selEl>=90 and selEl<99 then return selEl-68; end;
    if selEl>=99 and selEl<104 then return selEl-94; end;
    if selEl>=104 and selEl<MAX_ELEMENTS then  return selEl-46; end;
    if selEl==MAX_ELEMENTS then return selEl-116; end;
    default return selEl+18;
  end;
end;
//
// draw a cross
//
cross_point(Gr,x,y,color) begin
  line_p(Gr,x,y-1,x,y-3,color);
  line_p(Gr,x+1,y,x+3,y,color);
  line_p(Gr,x,y+1,x,y+3,color);
  line_p(Gr,x-1,y,x-3,y,color);
end;
//
// draw a cross
//
check_mark(Gr,x,y,color,on_off) begin
  RECT_P(Gr,x-4,y-2,x+4,y+6,WHITE,BLACK);
  if on_off≠0 then line_p(Gr,x-4,y-2,x+4,y+6,color); line_p(Gr,x+4,y-2,x-4,y+6,color); end;
end;
//
// draw an arrow down
//
down_arrow(Gr,x,y,color) begin
  line_p(Gr,x+3,y,x+7,y,color); //horizontal line
  line_p(Gr,x+3,y,x+3,y+10,color); // first vertical line
  line_p(Gr,x+7,y,x+7,y+10,color); // second vertical line
  line_p(Gr,x,y+10,x+3,y+10,color); // left horz line arrow
  line_p(Gr,x+7,y+10,x+10,y+10,color); // right horz line arrow
  line_p(Gr,x,y+10, x+5,y+15,color); // left slope towards peak
  line_p(Gr,x+10,y+10, x+5,y+15,color); // right slope towards peak
end;
//
// draw an arrow up
//
up_arrow(Gr,x,y,color) begin
  line_p(Gr,x+3,y+15,x+7,y+15,color); //horizontal line
  line_p(Gr,x+3,y+15,x+3,y+5,color); // first vertical line
  line_p(Gr,x+7,y+15,x+7,y+5,color); // second vertical line
  line_p(Gr,x,y+5,x+3,y+5,color); // left horz line arrow
  line_p(Gr,x+7,y+5,x+10,y+5,color); // right horz line arrow
  line_p(Gr,x,y+5, x+5,y,color); // left slope towards peak
  line_p(Gr,x+10,y+5, x+5,y,color); // right slope towards peak
end;
//
// left arrow
//
left_arrow(Gr,x,y,color) begin
  line_p(Gr,x+6,y,x+6,y+6,color); // vertical line
  line_p(Gr,x,y+3,x+6,y,color); // sloped upper line
  line_p(Gr,x,y+3,x+6,y+6,color); // sloped lower line
end;
//
// right arrow
//
right_arrow(Gr,x,y,color) begin
  line_p(Gr,x,y,x,y+6,color); // vertical line
  line_p(Gr,x,y,x+6,y+3,color); // sloped upper line
  line_p(Gr,x,y+6,x+6,y+3,color); // sloped lower line
end;
//
// get back random color
//
random_color() begin return rgb(random(256),random(256),random(256)); end;
//
// build the table
//
build_table(Gr) begin
  local i,j,x:=2,y:=2,dx:=0,TablePos:=1;

  dimgrob_p(Gr,HSIZE,220);
  rect_p(Gr);
  blit_p(G0,Gr,0,PropWndBeg,320,PropWndEnd);

  for j:=1 to 10 do
    for i:=1 to 18 do
      if TablePos:=position(j,i) then
        rect_p(Gr,x,y,x+el_width,y+el_height,rgb(0,0,0),distinct_colors(colorindex(TablePos)));
        textout_p(TablePos,Gr,x+2,y+1,1,BLACK);
        dx:=dim(symbolname(TablePos))-2;
        textout_p(symbolname(TablePos),Gr,x+text_offset-dx,y+10,1,BLACK);
      end; x:=x+el_width;
    end; x:=x-18*el_width; y:=y+el_height;
  end; x:=2*el_width+el_width/4+2; y:=7*el_height+2;

  // title
  textout_p(langreslist(LANG_ID+2),Gr,100+x-45,5,3,#FF006E);

  // left columns
  rect_p(Gr,51+x-45,26,55+x-45,30,distinct_colors(1));
  textout_p(distinct_family(5),Gr,58+x-45,25,1); //"Nichtmetalle"

  rect_p(Gr,51+x-45,36,55+x-45,40,distinct_colors(2));
  textout_p(distinct_family(1),Gr,58+x-45,35,1); //"Edelgase"

  rect_p(Gr,51+x-45,46,55+x-45,50,distinct_colors(3));
  textout_p(distinct_family(2),Gr,58+x-45,45,1); //"Alkalimetalle"

  rect_p(Gr,51+x-45,56,55+x-45,60,distinct_colors(4));
  textout_p(distinct_family(3),Gr,58+x-45,55,1); //"Erdalkalinemetalle"

  // right columns
  rect_p(Gr,160+x-45,26,164+x-45,30,distinct_colors(5));
  textout_p(distinct_family(8),Gr,168+x-45,25,1); //"Übergangsmetalle"

  rect_p(Gr,160+x-45,36,164+x-45,40,distinct_colors(6));
  textout_p(distinct_family(4),Gr,168+x-45,35,1); //"Halbmetalle"

  rect_p(Gr,160+x-45,46,164+x-45,50,distinct_colors(7));
  textout_p(distinct_family(7),Gr,168+x-45,45,1); //"Metalle"

  rect_p(Gr,160+x-45,56,164+x-45,60,distinct_colors(8));
  textout_p(distinct_family(6),Gr,168+x-45,55,1); //"Halogene"

  // lower two series
  rect_p(Gr,61+x-45,152,65+x-45,156,distinct_colors(9));
  textout_p(distinct_family(9),Gr,68+x-45,151,1); //"Lanthaniden"

  rect_p(Gr,61+x-45,161,65+x-45,165,distinct_colors(10));
  textout_p(distinct_family(10),Gr,68+x-45,160,1); //"Actiniden"

  // connection lines to lanthanides
  line_p(Gr,x,y,x,y+2*el_height+el_height/2);
  line_p(Gr,x,y+2*el_height+el_height/2,x+el_width*3/4,y+2*el_height+el_height/2);

  // connection lines to actinides
  x:=x+el_width/2;
  line_p(Gr,x,y,x,y+el_height+el_height/2);
  line_p(Gr,x,y+el_height+el_height/2,x+el_width/4,y+el_height+el_height/2);
end;
//
// invert the selected element
//
select_element(Gr,x,y,sel) begin
  local i,j; // used by matrix
  local TablePos:=1;
  local txt_off:=0;
  local dx:=0;

  if (x+y)>0 then
    // calculate based on the mouse position the
    // granular element in the matrix
    local tempX:=(x-2+MainDOffset)/el_width;
    local tempY:=(y-2)/el_height;
    // POSITION OF ELEMENT IN TABLE
    selected:=position(ip(tempY)+1,ip(tempX)+1);
  else selected:=sel; end;

  x:=2; y:=2;
  for j:=1 to 10 do
    for i:=1 to 18 do
      if TablePos:=position(j,i) then
        rect_p(Gr,x,y,x+el_width,y+el_height,BLACK,distinct_colors(colorindex(TablePos)));
        dx:=dim(symbolname(TablePos))-2;
        if selected==TablePos then
          // wipe out (overwrite current title)
          rect_p(Gr,30,2,260,22,WHITE,WHITE);
          // write new title
          textout_p(elementname(TablePos),Gr,30,5,3,#FF006E);
          // right align text
          txt_off:=0;
          if selected>4 then txt_off:=6; end;
          if selected>43 then txt_off:=12; end;
          textout_p(round(molmasse(TablePos),0),Gr,150-txt_off,2,2,0);
          // write symbolname
          textout_p(symbolname(TablePos),Gr,160,5,3,#FF006E);
          // right align text
          txt_off:=0;
          if selected>9 then txt_off:=6; end;
          if selected>99 then txt_off:=12; end;
          textout_p(TablePos,Gr,150-txt_off,12,2,0);
          // invert selected element
          fillpoly_p(Gr,{x,y,x,y+el_height,x+el_width,y+el_height,x+el_width,y},BLACK,110);
          textout_p(TablePos,Gr,x+2,y+1,1,WHITE);
          textout_p(symbolname(TablePos),Gr,x+text_offset-dx,y+10,1,WHITE);
        else
          textout_p(TablePos,G1,x+2,y+1,1,BLACK);
          textout_p(symbolname(TablePos),Gr,x+text_offset-dx,y+10,1,BLACK);
        end;
      end; x:=x+el_width;
    end; x:=x-18*el_width; y:=y+el_height;
  end;
end;
//
// Show the selected Element
//
show_element(Gr,sel,y) begin
  local EX1:=10,EX2:=130,EX3:=286;
  local txt:="",txt1:="",txt2:="";
  local BRK:=28,lin:=0;
  local highlight_prop:=0,props:={}, props1,props2;
  local j,n:=0;

  // which property on which line?
  props1:={0,0,17,14,32,30,31,28,0,0,3,20,21,22,7,25,0,0,0,8,18,5,9,10,19,11,12,13,24,23,0,0,6,27,26};
  props2:={0,0,17,14,32,32,30,31,28,0,0,3,20,21,22,7,25,0,0,0,8,18,5,9,10,19,11,12,13,24,23,0,0,6,27,26};
  props:=props1;
  // determine list to use
  if (dim(distinct_lookalike(lookalike(sel)))>BRK) then props:=props2; end;

  // select & highlight correct property
  if y>=linH then
    lin:=ip((PropWndBeg+y)/linH);
    highlight_prop:=props(lin);
  end;

  // create the composed graphic
  dimgrob_p(property_window,320,VSIZE);
  rect_p(property_window);

  // Element [-], Col:2
  textout_p(elementname(sel),Gr,7,2,3,rgb(255,0,110));
  // Name [-], Col:1
  textout_p(symbolname(sel),Gr,EX2+30,2,3,rgb(255,105,0));
  // Atomic Number [-] Col:0 (implicit column)
  textout_p(sel,Gr,EX2,2,3,rgb(38,127,0));

  // If it is Technetium(43) or Promethium(61) or
  // between Neptunium(93) and the biggest today known element
  // then it is a syntetic element
  if sel==43 or sel==61 or 93≤sel≤112 then textout_p("("+langreslist(LANG_ID+8)+")",Gr,EX2+60,7,1,rgb(255,0,0)); end;

  // first page of properties

  // General properties
  textout_p(langreslist(LANG_ID+9),Gr,EX1,2*linH-3,2);

  // Category, Family [-], Col:17
  textout_p(headerlist(17)+":",Gr,EX1,(3)*linH,1,LIGHTBLUE);
  if highlight_prop==17 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(distinct_family(family(sel)),Gr,EX2,(3)*linH,1,WHITE);

  // Group, Period, Block [-], Col:14, Col:15, Col:16
  textout_p(headerlist(14)+", "+headerlist(15)+", "+headerlist(16)+":",Gr,EX1,(4)*linH,1,LIGHTBLUE);
  if highlight_prop==14 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(group(sel)+", "+period(sel)+", "+block(sel),Gr,EX2,(4)*linH,1,WHITE);

  // Look Alike [-], Col:32 -- optional second line of text
  textout_p(headerlist(32)+":",Gr,EX1,(5)*linH,1,LIGHTBLUE);
  txt1:=distinct_lookalike(lookalike(sel));
  if dim(txt1)>BRK then
    // find the closest space from string backwards
    // starting with char(28) 'BRK'
    txt2:=left(txt1,BRK);
    for j from BRK downto 1 do txt:=mid(txt2,j,1); if txt==" " then break; end; end;
    txt2:=right(txt1,dim(txt1)-j);
    txt1:=left(txt1,j-1);
    n:=1;
  end;

  if highlight_prop==32 then
    fillpoly_p(Gr,{EX2-1,(lin+0)*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,(lin+0)*linH-2},BLACK,110);
    if dim(txt2)>0 then
      if lin==6 then fillpoly_p(Gr,{EX2-1,(lin-n)*linH-2,EX2-1,(lin+1-n)*linH-3,EX3,(lin+1-n)*linH-3,EX3,(lin-n)*linH-2},BLACK,110);
      else fillpoly_p(Gr,{EX2-1,(lin+n)*linH-2,EX2-1,(lin+1+n)*linH-3,EX3,(lin+1+n)*linH-3,EX3,(lin+n)*linH-2},BLACK,110); end;
    end;
  end; if dim(txt2)>0 then textout_p(txt2,Gr,EX2,(6)*linH,1,WHITE); end;
  textout_p(txt1,Gr,EX2,5*linH,1,WHITE);

  // CAS Number [-], Col:30
  textout_p(headerlist(30)+":",Gr,EX1,(6+n)*linH,1,LIGHTBLUE);
  if highlight_prop==30 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(CASnumber(sel),Gr,EX2,(6+n)*linH,1,WHITE);

  // Mass on Earth Shell [ppm], Col:31
  textout_p(headerlist(31)+":",Gr,EX1,(7+n)*linH,1,LIGHTBLUE);
  if highlight_prop==31 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(string(earthmass(sel),3,2)+" "+unitlist(31),Gr,EX2,(7+n)*linH,1,WHITE);

  // Discovery Year [Year],Col:28
  textout_p(headerlist(28)+":",Gr,EX1,(8+n)*linH,1,LIGHTBLUE);
  if highlight_prop==28 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(discovery(sel)>0,discovery(sel)+" "+unitlist(28),langreslist(LANG_ID+10)),Gr,EX2,(8+n)*linH,1,WHITE);

  // Atomic properties
  textout_p(langreslist(LANG_ID+11),Gr,10,(10+n)*linH-3,2);

  // Atomic Weight [u], Col:3
  textout_p(headerlist(3)+":",Gr,EX1,(11+n)*linH,1,LIGHTBLUE);
  if highlight_prop==3 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  if fp(atomicmass(sel))==0 then textout_p("["+atomicmass(sel)+"] "+unitlist(3),Gr,EX2,(11+n)*linH,1,WHITE);
  else textout_p(atomicmass(sel)+" "+unitlist(3),Gr,EX2,(11+n)*linH,1,WHITE); end;

  // Atomic Radius [pm], Col:20
  textout_p(headerlist(20)+":",Gr,EX1,(12+n)*linH,1,LIGHTBLUE);
  if highlight_prop==20 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(atomradius(sel)>0,atomradius(sel)+" "+unitlist(20),"-"),Gr,EX2,(12+n)*linH,1,WHITE);

  // Covalent radius [pm], Col:21
  textout_p(headerlist(21)+":",Gr,EX1,(13+n)*linH,1,LIGHTBLUE);
  if highlight_prop==21 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(covalentradii(sel)>0,covalentradii(sel)+" "+unitlist(21),"-"),Gr,EX2,(13+n)*linH,1,WHITE);

  // Van-der-Waals-Radius [pm], Col:22
  textout_p(headerlist(22)+":",Gr,EX1,(14+n)*linH,1,LIGHTBLUE);
  if highlight_prop==22 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(vanderwaals(sel)>0,vanderwaals(sel)+" "+unitlist(22),"-"),Gr,EX2,(14+n)*linH,1,WHITE);

  // Electron Configuration [-], Col:7
  textout_p(headerlist(7)+":",Gr,EX1,(15+n)*linH,1,LIGHTBLUE);
  if highlight_prop==7 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(electronconfig(sel),Gr,EX2,(15+n)*linH,1,WHITE);

  // First Ionisation Energy [kJ/mol], Col:25
  textout_p(headerlist(25)+":",Gr,EX1,(16+n)*linH,1,LIGHTBLUE);
  if highlight_prop==25 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(firstionenergy(sel)>0,firstionenergy(sel)+" "+unitlist(25),"-"),Gr,EX2,(16+n)*linH,1,WHITE);

  //second page of properties (does not need to react to text moves above ('look alike' prop))
  // determine list to use
  props:=props1;
  // select & highlight correct property
  if y>=linH then lin:=ip((PropWndBeg+y)/linH); highlight_prop:=props(lin); end; n:=0;

  // Name [-], Col:1
  textout_p(symbolname(sel),Gr,EX2+30,19*linH-6,3,rgb(255,105,0));
  // Atomic Number [-] Col:0 (implicit column)
  textout_p(sel,Gr,EX2,19*linH-6,3,rgb(38,127,0));

  // Physical Properties
  textout_p(langreslist(LANG_ID+12),Gr,10,19*linH-3,2);

  // Phase  (Aggregate State at Room Temp) [-], Col:8
  textout_p(headerlist(8)+":",Gr,EX1,(20+n)*linH,1,LIGHTBLUE);
  if highlight_prop==8 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(distinct_aggregatstate(aggregatstate(sel)),Gr,EX2,(20+n)*linH,1,WHITE);

  // Crystal Structure [-], Col:18
  textout_p(headerlist(18)+":",Gr,EX1,(21+n)*linH,1,LIGHTBLUE);
  if highlight_prop==18 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(distinct_crystal(crystal(sel)),Gr,EX2,(21+n)*linH,1,WHITE);

  // Density [g/cm^3], Col:5
  textout_p(headerlist(5)+":",Gr,EX1,(22+n)*linH,1,LIGHTBLUE);
  if highlight_prop==5 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(density(sel)>0,density(sel)+" "+unitlist(5),"-"),Gr,EX2,(22+n)*linH,1,WHITE);

  // Melting Point [°C], Col:9
  textout_p(headerlist(9)+":",Gr,EX1,(23+n)*linH,1,LIGHTBLUE);
  if highlight_prop==9 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(meltingpoint(sel)>0,meltingpoint(sel)+" "+unitlist(9),"-"),Gr,EX2,(23+n)*linH,1,WHITE);

  // Boiling Point [°C], Col:10
  textout_p(headerlist(10)+":",Gr,EX1,(24+n)*linH,1,LIGHTBLUE);
  if highlight_prop==10 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(boilingpoint(sel)>0,boilingpoint(sel)+" "+unitlist(10),"-"),Gr,EX2,(24+n)*linH,1,WHITE);

  // Atomic Volume [cm^3/mol], Col:19
  textout_p(headerlist(19)+":",Gr,EX1,(25+n)*linH,1,LIGHTBLUE);
  if highlight_prop==19 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(atomicvolume(sel)>0,atomicvolume(sel)+" "+unitlist(19),"-"),Gr,EX2,(25+n)*linH,1,WHITE);

  // Heat of Vaporization [kJ/mol], Col:11 // Boiling Enthalpy
  textout_p(headerlist(11)+":",Gr,EX1,(26+n)*linH,1,LIGHTBLUE);
  if highlight_prop==11 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(boilingenthalpy(sel)>0,boilingenthalpy(sel)+" "+unitlist(11),"-"),Gr,EX2,(26+n)*linH,1,WHITE);

  // Heat of Fusion [kJ/mol], Col:12 // Melting Enthalpy
  textout_p(headerlist(12)+":",Gr,EX1,(27+n)*linH,1,LIGHTBLUE);
  if highlight_prop==12 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(meltingenthalpy(sel)>0,meltingenthalpy(sel)+" "+unitlist(12),"-"),Gr,EX2,(27+n)*linH,1,WHITE);

  // Heat Capacity [J/(kg.K)], Col:13
  textout_p(headerlist(13)+":",Gr,EX1,(28+n)*linH,1,LIGHTBLUE);
  if highlight_prop==13 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(heatcapacity(sel)>0,heatcapacity(sel)+" "+unitlist(13)),Gr,EX2,(28+n)*linH,1,WHITE);

  // Electrical Conductivity [10^6 A/(V*m)], Col:24
  textout_p(headerlist(24)+":",Gr,EX1,(29+n)*linH,1,LIGHTBLUE);
  if highlight_prop==24 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(electroconductivity(sel)>0,electroconductivity(sel)+" "+unitlist(24),"-"),Gr,EX2,(29+n)*linH,1,WHITE);

  // Thermal Conductivity [W/(m*K)], Col:23
  textout_p(headerlist(23)+":",Gr,EX1,(30+n)*linH,1,LIGHTBLUE);
  if highlight_prop==23 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(ifte(thermalconductivity(sel)>0,thermalconductivity(sel)+" "+unitlist(23),"-"),Gr,EX2,(30+n)*linH,1,WHITE);

  // Chemical properties
  textout_p(langreslist(LANG_ID+13),Gr,10,(32+n)*linH-3,2);

  // Oxidation States [-], Col:6
  textout_p(headerlist(6)+":",Gr,EX1,(33+n)*linH,1,LIGHTBLUE);
  if highlight_prop==6 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(oxidstates(sel),Gr,EX2,(33+n)*linH,1,WHITE);

  // Oxide [-], Col:27
  textout_p(headerlist(27)+":",Gr,EX1,(34+n)*linH,1,LIGHTBLUE);
  if highlight_prop==27 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(distinct_oxide(oxide(sel)),Gr,EX2,(34+n)*linH,1,WHITE);

  // Elektronegativity [-], Col:26
  textout_p(headerlist(26)+":",Gr,EX1,(35+n)*linH,1,LIGHTBLUE);
  if highlight_prop==26 then fillpoly_p(Gr,{EX2-1,lin*linH-2,EX2-1,(lin+1)*linH-3,EX3,(lin+1)*linH-3,EX3,lin*linH-2},BLACK,110); end;
  textout_p(electronegativity(sel),Gr,EX2,(35+n)*linH,1,WHITE);

  // Arrows
  if PropWndBeg<VSIZE-320 then up_arrow(Gr,308,19*linH,WHITE); end;
  if PropWndEnd<VSIZE then down_arrow(Gr,308,14*linH,WHITE) end;
  left_arrow(Gr,0,119,WHITE); right_arrow(Gr,313,119,WHITE);
end;
//
// Show sorted list of Elements
//
show_list(Gr,sort_alpha,posx,posy) begin
  local j,k;
  local x:=2,y:=2;
  local fore_color;
  local atom_no;
  local xx:=30,xxx:=70,xxxx:=180;

  // at what element are we currently
  local sel:=ip((ListWndBeg+posy)/linH);
  // update global, eventually used by prop window
  selected:=sel;

  // create the view
  dimgrob_p(Gr,320,LSIZE);
  rect_p(Gr);

  // print the column headers
  if sort_alpha then textout_p("No",Gr,x,y+j*linH,1,0);
  else textout_p("No" ,Gr,x,y+j*linH,1,0); textout_p(" ҉" ,Gr,x+10,y+j*linH,1,rgb(255,0,0));
  end;

  // vertical line
  line_p(Gr,xx-2,y,xx-2,linH-2,0);
  line_p(Gr,xx-2,1*linH+2,xx-2,LSIZE,LIGHTGRAY);

  textout_p(headerlist(1),Gr,xx,y+j*linH,1,0);
  // vertical line
  line_p(Gr,xxx-2,y,xxx-2,linH-2,0);
  line_p(Gr,xxx-2,1*linH+2,xxx-2,LSIZE,LIGHTGRAY);

  if sort_alpha then textout_p(headerlist(2),Gr,xxx,y+j*linH,1,0); textout_p("҉ ",Gr,xxx+40,y+j*linH,1,rgb(255,0,0));
  else textout_p(headerlist(2),Gr,xxx,y+j*linH,1,0); end;

  // vertical line
  line_p(Gr,xxxx-2,y,xxxx-2,linH-2,0);
  line_p(Gr,xxxx-2,1*linH+2,xxxx-2,LSIZE,LIGHTGRAY);

  textout_p(headerlist(17),Gr,xxxx,y+j*linH,1,0);
  // horizontal line
  line_p(Gr,x,1*linH,318,1*linH,0);

  // vertical lines
  if sort_alpha then
    new_order:=sort(elementname); // sort list
    atom_no:=makelist(X,X,1,MAX_ELEMENTS,1);

    // print out
    for j:=1 to MAX_ELEMENTS do
      if j==sel then fillpoly_p(Gr,{1,sel*linH,318,sel*linH,318,(sel+1)*linH,1,(sel+1)*linH},WHITE,110); fore_color:=BLACK;
      else fore_color:=WHITE; end;
      textout_p(pos(elementname, new_order(j)),Gr,x,y+j*linH,1,fore_color);
      textout_p(symbolname(pos(elementname, new_order(j))),Gr,xx,y+j*linH,1,fore_color);
      textout_p(new_order(j),Gr,xxx,y+j*linH,1,fore_color);
      textout_p(distinct_family(family(pos(elementname, new_order(j)))),Gr,xxxx,y+j*linH,1,fore_color);    end;
  else
    // print out
    for j:=1 to MAX_ELEMENTS do
      if j==sel then fillpoly_p(Gr,{1,sel*linH,318,sel*linH,318,(sel+1)*linH,1,(sel+1)*linH},WHITE,110); fore_color:=BLACK;
      else fore_color:=WHITE; end;
      //distinct_colors(colorindex(j));
      textout_p(j,Gr,x,y+j*linH,1,fore_color);
      textout_p(symbolname(j),Gr,xx,y+j*linH,1,fore_color);
      textout_p(elementname(j),Gr,xxx,y+j*linH,1,fore_color);
      textout_p(distinct_family(family(j)),Gr,xxxx,y+j*linH,1,fore_color);
    end;
  end;
end;
//
// Get the calculated Text Width in pixel for a specified string
// does only subset from 65 to 122 (if char is outside return five as
// a rough median
//
GetTextExtent(txt,fsize) begin
  //
  // this is Pixels/per char (for the small size font =1)
  // counted across the entire screen width (320)
  // devided by the count of chars between ~40 and ~106(I)
  // sometimes cutting in half or some
  // not taking into account kerning of adjacent different chars
  // (if this happens)
  // also not taking into account special chars
  //
  // representing character codes 65 to 90
  // then 6 dummies and again 97 to 122
  // "A":=6.013773584906   "a":=5.02345327
  // "B":=6.013773584906   "b":=6.03773584906
  // "C":=6.013773584906   "c":=5.00000000000
  // "D":=7.03381642512    "d":=6.03503584906
  // "E":=4.9982           "e":=5.05291052913
  // "F":=4.9982           "f":=3.01886792453
  // "G":=7.03381642512    "g":=5.05291052913
  // "H":=7.03381642512    "h":=6.03503584906
  // "I":=3.01886792453    "i":=3.01886792453
  // "J":=5.000000000000   "j":=3.01886792453
  // "K":=6.013773584906   "k":=5.05291052913
  // "L":=5.000000000000   "l":=3.01886792453
  // "M":=9.015873015875   "m":=9.015873015875
  // "N":=7.03381642512    "n":=6.03773584906
  // "O":=7.03381642512    "o":=6.03773584906
  // "P":=6.03773584906    "p":=6.03773584906
  // "Q":=7.03381642512    "q":=6.03773584906
  // "R":=6.03773584906    "r":=4.02531955695
  // "S":=4.9982           "s":=4.9982
  // "T":=5.05291052913    "t":=3.01886792453
  // "U":=7.03381642512    "u":=6.03773584906
  // "V":=6.03773584906    "v":=4.9982
  // "W":=9.015873015875   "w":=7.03381642512
  // "X":=5.05291052913    "x":=5.05291052913
  // "Y":=5.05291052913    "y":=5.05291052913
  // "Z":=5.05291052913    "z":=4.02531955695
  //
local CharSet:={6.013773584906,6.013773584906,6.013773584906,7.03381642512,4.9982,4.9982,7.03381642512,7.03381642512,3.01886792453,5.000000000000,9.015873015875,7.03381642512,7.03381642512,6.03773584906,7.03381642512,6.03773584906,4.9982,5.05291052913,7.03381642512,6.03773584906,9.015873015875,5.05291052913,5.05291052913,5.05291052913,5.0,5.0,5.0,5.0,5.0,5.0,5.02345327,6.03773584906,5.000000000000,6.03503584906,5.05291052913,3.01886792453,5.05291052913,6.03503584906,3.01886792453,3.01886792453,9.015873015875,6.03773584906,6.03773584906,6.03773584906,6.03773584906,4.02531955695,4.9982,7.03381642512,5.05291052913,5.05291052913,4.02531955695};

  local OFFSET:=64; // A starts at 65
  local i,sum,ntxt,nval;

  for i from 1 to dim(txt) do
    ntxt:=asc(mid(txt,i,1));
    nval:=5*fsize;
    if 64<ntxt<=122 then nval=CharSet(OFFSET+i)*fsize; end;
    sum:=sum+nval;
  end; return sum;
end;
//
// 4.12 as a 'educated guess'
// try and error test of this sample txt median value of charwidth
//
center_text(txt,Gr,x_width,y) begin
  if txt=="" then return; end;
  local wtxt:=GetTextExtent(txt,1);
  textout_p(txt,Gr,(x_width-wtxt)/2,y,1,BLACK,320,WHITE);
end;
//
// right align text
//
ralign_text(txt,Gr,x,y) begin
  if txt=="" then return; end;
  local wtxt:=GetTextExtent(txt,1);
  textout_p(txt,Gr,x-wtxt,y,1,BLACK);
end;
//
// binary tree
//
chaos(Gr) begin
  local aa,mm:=3,xx;

  repeat aa:=0.05;
   repeat xx:=aa;
    for I from 1 to 3 do xx:=mm*xx*(1-xx); end;
    pixon_p(Gr,(mm-3)*320,xx*240,#FF);
    aa:=aa+0.05;
   until aa>0.5; mm:=mm+0.01;
  until mm>4;
end;
//
// Show Credits where credit is due...
//
show_about(Gr) begin
  local i;
  // create the view
  dimgrob_p(Gr,320,240);
  rect_p(Gr);
  chaos(Gr);
  for i from 1 to (size(Credit)) do center_text(Credit(i),Gr,320,2+i*linH); end;
end;
//
// customized plot function
//
show_plot(Gr,prop,sel,conn_dots) begin
  local i;
  local ymin,ymax;
  local ftor;
  local EX1:=22,EX2:=76;
  local wtxt:=0;
  local neg_off;
  local lastx, lasty;
  local this_prop;
  local res:=0;

  // create the view
  dimgrob_p(Gr,320,240);
  rect_p(Gr);

  // horizontal (we need two times 118pixels horizontal)
  line_p(Gr,10,210,69,210,WHITE);
  line_p(Gr,70,210,310,210,LIGHTGRAY);

  for i from 70 to 310 step 10 do
    // after 50 and 100 (remember 2*118 pixels, to use available screen space)
    line_p(Gr,i,211,i,ifte((i-70) mod 100,213,214),WHITE);
    line_p(Gr,i,211,i,ifte((i-70) mod 200,213,215),WHITE);
  end;

  textout_p("0",Gr,60,220,1,WHITE);
  textout_p("50",Gr,165,220,1,WHITE);
  textout_p("100",Gr,262,220,1,WHITE);
  textout_p("[Element]",Gr,278,230,1,WHITE);

  // vertical (we need to normalize values the from 0 to 200pixels)
  line_p(Gr,70,200,70,220,WHITE);
  line_p(Gr,70,10,70,210,LIGHTGRAY);

  // plot title
  textout_p("["+unitlist(prop)+"]",Gr,75,2,1,WHITE);
  textout_p(headerlist(prop)+":",Gr,120,2,1,WHITE);
  wtxt:=GetTextExtent(headerlist(prop)+":",1)+5;

  // draw checkmark
  check_mark(Gr,180,230,WHITE,1);
  textout_p(langreslist(LANG_ID+37),Gr,190,230,1,WHITE);

  // which property we need to plot?
  case
    if prop==4 then this_prop:=molmasse; end;
    if prop==5 then this_prop:=density; end;
    if prop==9 then this_prop:=meltingpoint; end;
    if prop==10 then this_prop:=boilingpoint; end;
    if prop==11 then this_prop:=boilingenthalpy; end;
    if prop==12 then this_prop:=meltingenthalpy; end;
    if prop==13 then this_prop:=heatcapacity; end;
    if prop==19 then this_prop:=atomicvolume; end;
    if prop==20 then this_prop:=atomradius; end;
    if prop==21 then this_prop:=covalentradii; end;
    if prop==22 then this_prop:=vanderwaals; end;
    if prop==23 then this_prop:=thermalconductivity; end;
    if prop==24 then this_prop:=electroconductivity; end;
    if prop==25 then this_prop:=firstionenergy; end;
    if prop==26 then this_prop:=electronegativity; end;
    if prop==28 then this_prop:=discovery; end;
    if prop==31 then this_prop:=earthmass; end;
    default return 0;
  end;

  ymin:=min(this_prop);ymax:=max(this_prop);
  textout_p(this_prop(sel)+unitlist(prop),Gr,120+wtxt,2,1,#FF);

  ftor:=200/(ymax-ymin); // this factor is how many specific units per pixel
  neg_off:=ftor*ymin; // negativ or positiv offset of zero [in pixels] (avoid divide by zero later on)
  if (neg_off<>0) then   // paint a faint line where 0 would be (if we are not already at zero)
    line_p(Gr,67,210+neg_off,310,210+neg_off,LIGHTGRAY);
    textout_p("0",Gr,60,210+neg_off-3,1,LIGHTGRAY); // show where zero is
  end;
  // need to paint the connected line?
  check_mark(Gr,180,230,WHITE,conn_dots);

  for i from 1 to MAX_ELEMENTS step 1 do
    // paint always two pixels per element on the coordinate plot
    // normalize the y-axis
    if (conn_dots>0) and ((lastx+lasty)>0) then line_p(Gr,lastx,lasty,70+i+i,210-(ftor*this_prop(i)-neg_off),LIGHTGRAY); end;
    // starting at relative left Y-Axis (70)
    // starting the Y-Value from below at relative zero (210pix)
    // in the direction of going up
    // value the Y-Min if there is an offset (not startig at zero)
    pixon_p(Gr,70+i+i,210-(ftor*this_prop(i)-neg_off),#FF);
    pixon_p(Gr,71+i+i,210-(ftor*this_prop(i)-neg_off),#FF);
    lastx:=70+i+i;
    lasty:=210-(ftor*this_prop(i)-neg_off);
  end;
  // show the cross where we are right now
  cross_point(Gr,71+sel+sel,210-(ftor*this_prop(sel)-neg_off),#FF0000);

  // normalize y-axis lineal to 200
  for i from 0 to 200 step 5 do
    // after 50 and 100 (remember 2*118 pixels, to use available screen space)
    line_p(Gr,ifte(i mod 50,67,60),10+i,69,10+i,WHITE);
  end;
  //
  // normalize y-axis to 200
  // NOTE: There is no relative scale here, the Y-max scale is always ymax
  // in other words: if the ymin value is not zero
  // the scale has to be squeezd with the offset percentage
  // and not just shifted, the screen will not magically enlarge
  //ftor:=(ymax-ymin)/200;
  ftor:=ymax/200;
  ralign_text(string(round(ymin,1)),Gr,52,200);
  for i from 50 to 200 step 50 do
    // after 50 and 100 (remember 2*118 pixels, to use available screen space)
    ralign_text(string(round(ftor*i,1)),Gr,50,206-i);
  end;

  // Name [-], Col:1
  textout_p(symbolname(sel),Gr,EX1,220,1,#FF6900);
  // Atomic Number [-] Col:0 (implicit column)
  textout_p(sel,Gr,2,215,1,#267F00);
  // Atomic Number [-] Col:0 (implicit column)
  textout_p(round(molmasse(sel),0),Gr,2,225,1,#267F00);
  // Element [-], Col:2
  textout_p(elementname(sel),Gr,EX2,220,1,#FF006E);
end;
//
// which property to plot
//
prop_plot() begin
  // we are not able to plot non-numerical properties
  //we should be able to plot those:
  // 4:   Mol Weight
  // 5:   Density
  // 9:   Melting Point
  // 10: Boiling Point
  // 11: Heat of Vaporization
  // 12: Heat of Fusion
  // 13: Heat Capacity
  // 19: Atomic Volume
  // 20: Atom Radius
  // 21: Covalent Radius
  // 22: Van-der-Waals-Radius
  // 23: Thermal Conductivity
  // 24: Electrical Conductivity
  // 25: First Ionisation Energy
  // 26: Elektronegativity
  // 28: Discovery Year
  // 31: Mass on Earth Shell
  local prop_sel;
  local props:={"4: "+headerlist(4),
                "5: "+headerlist(5),
                "9: "+headerlist(9),
                "10: "+headerlist(10),
                "11: "+headerlist(11),
                "12: "+headerlist(12),
                "13: "+headerlist(13),
                "19: "+headerlist(19),
                "20: "+headerlist(20),
                "21: "+headerlist(21),
                "22: "+headerlist(22),
                "23: "+headerlist(23),
                "24: "+headerlist(24),
                "25: "+headerlist(25),
                "26: "+headerlist(26),
                "28: "+headerlist(28),
                "31: "+headerlist(31)};

  choose (prop_sel, langreslist(LANG_ID+36),props);
  // we start with the fourth prop and the last one is after 28th the 31st
  return ifte(prop_sel==26,prop_sel+5,prop_sel+3);
end;
//
// which element are we at?
//
selected_plot(x,y) begin
  // first of all, we must be inside our defined Y-Axis of 200 pixels
  if 10<=y<=210 then
    // then wee need to inside 2*MAX_ELEMENTS
    // we know that we start a X-Axis 70 pixel
    if 70<x<70+2*MAX_ELEMENTS then return ip((x-70)/2); end;
  end;
end;
//
// core loop of the application
// loop until 'ESC' key has been detected
//
DoLoop(Gr) begin
  local MyWait, LastWait;
  local MyMouse, LastMouse;
  local MyKey, LastKey;
  local WaitReal;

  repeat // until battery is depleted completly
    // this must be the first event to fire
    // in order to properly show the new screen
    // logically it could also be at the end (where it was first)
    // but this gives a strange behaviour (user experience)
    Event_Redraw(Gr);
    // if it is a list save away the last event code
    if type(MyWait)==6 then LastWait:=MyWait; end;
    if type(MyMouse)==6 then LastMouse:=MyMouse; end;
    // read from keyboard input queue
    MyWait:=B→R(wait(−1));
    // read from touch input queue
    MyMouse:=B→R(mouse());
    // if it is indeed a real number then a keystroke has been recorded
    if type(MyWait)==0 then
      // store the keycode for later use
      WaitReal:=MyWait;
      if MyWait>=0 and MyWait<51 then Event_KeyPress(Gr,MyWait) end;
    end; // if
    // a list? (if it is a list then a mouse event occured)
    if type(MyWait)==6 then
      // if it is a list, then a mouse (touch) has been recognized
      case
        if MyWait(1)==1 and size(MyMouse(1))==5  and size(MyMouse(2))==0 then
          if MyMouse(1,5)==2 and LastWait(1)=1 then Event_DragMove(Gr,MyMouse(1,1),MyMouse(1,2),LastMouse(1,1),LastMouse(1,2)); end;
        end;
        if MyWait(1)==2 and size(MyMouse(1))==0 and size(MyMouse(2))==0 and size(MyWait)==1 then
          if LastWait(1)==0 then Event_MouseClick(Gr,LastWait(2),LastWait(3)); end;
        end;
        if MyWait(1)==3 then
          if 213<=MyWait(3)<=239 then
            // SOFTBUTTONS
            // this is to check if we are down below on the softmenu area
            case
              // 1#6 menu points
              if 0<=MyWait(2)<=51 then Event_MenuClick(Gr,1);
              end;
              // 2#6 menu points
              if 53<=MyWait(2)<=104 then Event_MenuClick(Gr,2); end;
              // 3#6 menu points
              if 106<= MyWait(2)<=157 then Event_MenuClick(Gr,3); end;
              // 4#6 menu points
              if 159<= MyWait(2)<=210 then Event_MenuClick(Gr,4); end;
              // 5#6 menu points
              if 212<= MyWait(2)<=263 then Event_MenuClick(Gr,5); end;
              // 6#6 menu points
              if 265<= MyWait(2)<=319 then Event_MenuClick(Gr,6); end;
            end;
          else
            if size(MyMouse(1))==0 and size(MyMouse(2))==0 and LastWait(1)==2 and size(LastWait)==1 then
              // {2} {{}{}}
              // textout_p("New mouse event: Mouse Up After Click",Gr,1,next_line,1);
            end;
          end;
        end;
        if MyWait(1)==5 and size(MyMouse(1))==5 and size(MyMouse(2))==5 and MyMouse(1,5)==3 and MyMouse(2,5)==7 then //textout_p("New mouse event: Stretch",Gr,1,next_line,1);
        end;
      end;
    end;
  until WaitReal==K_ESC;
end;
